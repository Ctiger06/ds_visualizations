install.packages('randomForest')
C9292greer
data = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
head(data,10)
data[["education_num"]]=NULL
data[["fnlwgt"]]=NULL
data$type_employer = as.character(data$type_employer)
data$occupation = as.character(data$occupation)
data$country = as.character(data$country)
data$education = as.character(data$education)
data$race = as.character(data$race)
data$marital = as.character(data$marital)
dataprep = function(){ data = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education", "education_num","marital", "occupation", "relationship", "race","sex", "capital_gain", "capital_loss", "hr_per_week","country", "income"), fill=FALSE,strip.white=T) data[["education_num"]]=NULL data[["fnlwgt"]]=NULL data$type_employer = as.character(data$type_employer) data$occupation = as.character(data$occupation) data$country = as.character(data$country) data$education = as.character(data$education) data$race = as.character(data$race) data$marital = as.character(data$marital) data$marital[data$marital=="Never-married"] = "Never-Married" data$marital[data$marital=="Married-AF-spouse"] = "Married" data$marital[data$marital=="Married-civ-spouse"] = "Married" data$marital[data$marital=="Married-spouse-absent"] = "Not-Married" data$marital[data$marital=="Separated"] = "Not-Married" data$marital[data$marital=="Divorced"] = "Not-Married" data$marital[data$marital=="Widowed"] = "Widowed" data$country[data$country=="Cambodia"] = "SE-Asia" # blocking Country of Origin data$country[data$country=="Canada"] = "British-Commonwealth" data$country[data$country=="China"] = "China" data$country[data$country=="Columbia"] = "South-America" data$country[data$country=="Cuba"] = "Other" data$country[data$country=="Dominican-Republic"] = "Latin-America" data$country[data$country=="Ecuador"] = "South-America" data$country[data$country=="El-Salvador"] = "South-America" data$country[data$country=="England"] = "British-Commonwealth" data$country[data$country=="France"] = "Euro_1" data$country[data$country=="Germany"] = "Euro_1" data$country[data$country=="Greece"] = "Euro_2" data$country[data$country=="Guatemala"] = "Latin-America" data$country[data$country=="Haiti"] = "Latin-America" data$country[data$country=="Holand-Netherlands"] = "Euro_1" data$country[data$country=="Honduras"] = "Latin-America" data$country[data$country=="Hong"] = "China" data$country[data$country=="Hungary"] = "Euro_2" data$country[data$country=="India"] = "British-Commonwealth" data$country[data$country=="Iran"] = "Other" data$country[data$country=="Ireland"] = "British-Commonwealth" data$country[data$country=="Italy"] = "Euro_1" data$country[data$country=="Jamaica"] = "Latin-America" data$country[data$country=="Japan"] = "Other" data$country[data$country=="Laos"] = "SE-Asia" data$country[data$country=="Mexico"] = "Latin-America" data$country[data$country=="Nicaragua"] = "Latin-America" data$country[data$country=="Outlying-US(Guam-USVI-etc)"] = "Latin-America" data$country[data$country=="Peru"] = "South-America" data$country[data$country=="Philippines"] = "SE-Asia" data$country[data$country=="Poland"] = "Euro_2" data$country[data$country=="Portugal"] = "Euro_2" data$country[data$country=="Puerto-Rico"] = "Latin-America" data$country[data$country=="Scotland"] = "British-Commonwealth" data$country[data$country=="South"] = "Euro_2" data$country[data$country=="Taiwan"] = "China" data$country[data$country=="Thailand"] = "SE-Asia" data$country[data$country=="Trinadad&Tobago"] = "Latin-America" data$country[data$country=="United-States"] = "United-States" data$country[data$country=="Vietnam"] = "SE-Asia" data$country[data$country=="Yugoslavia"] = "Euro_2" data$education = gsub("^10th","Dropout",data$education) data$education = gsub("^11th","Dropout",data$education) data$education = gsub("^12th","Dropout",data$education) data$education = gsub("^1st-4th","Dropout",data$education) data$education = gsub("^5th-6th","Dropout",data$education) data$education = gsub("^7th-8th","Dropout",data$education) data$education = gsub("^9th","Dropout",data$education) data$education = gsub("^Assoc-acdm","Associates",data$education) data$education = gsub("^Assoc-voc","Associates",data$education) data$education = gsub("^Bachelors","Bachelors",data$education) data$education = gsub("^Doctorate","Doctorate",data$education) data$education = gsub("^HS-Grad","HS-Graduate",data$education) data$education = gsub("^Mast
ers","Masters",data$education) data$education = gsub("^Preschool","Dropout",data$education) data$education = gsub("^Prof-school","Prof-School",data$education) data$education = gsub("^Some-college","HS-Graduate",data$education) data$type_employer = gsub("^Federal-gov","Federal-Govt",data$type_employer) data$type_employer = gsub("^Local-gov","Other-Govt",data$type_employer) data$type_employer = gsub("^State-gov","Other-Govt",data$type_employer) data$type_employer = gsub("^Private","Private",data$type_employer) data$type_employer = gsub("^Self-emp-inc","Self-Employed",data$type_employer) data$type_employer = gsub("^Self-emp-not-inc","Self-Employed",data$type_employer) data$type_employer = gsub("^Without-pay","Not-Working",data$type_employer) data$type_employer = gsub("^Never-worked","Not-Working",data$type_employer) data$occupation = gsub("^Adm-clerical","Admin",data$occupation) data$occupation = gsub("^Armed-Forces","Military",data$occupation) data$occupation = gsub("^Craft-repair","Blue-Collar",data$occupation) data$occupation = gsub("^Exec-managerial","White-Collar",data$occupation) data$occupation = gsub("^Farming-fishing","Blue-Collar",data$occupation) data$occupation = gsub("^Handlers-cleaners","Blue-Collar",data$occupation) data$occupation = gsub("^Machine-op-inspct","Blue-Collar",data$occupation) data$occupation = gsub("^Other-service","Service",data$occupation) data$occupation = gsub("^Priv-house-serv","Service",data$occupation) data$occupation = gsub("^Prof-specialty","Professional",data$occupation) data$occupation = gsub("^Protective-serv","Other-Occupations",data$occupation) data$occupation = gsub("^Sales","Sales",data$occupation) data$occupation = gsub("^Tech-support","Other-Occupations",data$occupation) data$occupation = gsub("^Transport-moving","Blue-Collar",data$occupation) data$race[data$race=="White"] = "White" data$race[data$race=="Black"] = "Black" data$race[data$race=="Amer-Indian-Eskimo"] = "Amer-Indian" data$race[data$race=="Asian-Pac-Islander"] = "Asian" data$race[data$race=="Other"] = "Other" data[["capital_gain"]] <- ordered(cut(data$capital_gain,c(-Inf, 0, median(data[["capital_gain"]][data[["capital_gain"]] >0]), Inf)), labels = c("None", "Low", "High")) data[["capital_loss"]] <- ordered(cut(data$capital_loss,c(-Inf, 0, median(data[["capital_loss"]][data[["capital_loss"]]
data = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
#completely delete these variables from the dataframe
data[["education_num"]]=NULL
data[["fnlwgt"]]=NULL
data$type_employer = as.character(data$type_employer)
data$occupation = as.character(data$occupation)
data$country = as.character(data$country)
data$education = as.character(data$education)
data$race = as.character(data$race)
data$marital = as.character(data$marital)
table(data$type_employer)
data$type_employer = gsub("^Federal-gov","Federal-Govt",data$type_employer)
data$type_employer = gsub("^Local-gov","Other-Govt",data$type_employer)
data$type_employer = gsub("^State-gov","Other-Govt",data$type_employer)
data$type_employer = gsub("^Private","Private",data$type_employer)
data$type_employer = gsub("^Self-emp-inc","Self-Employed",data$type_employer)
data$type_employer = gsub("^Self-emp-not-inc","Self-Employed",data$type_employer)
data$type_employer = gsub("^Without-pay","Not-Working",data$type_employer)
data$type_employer = gsub("^Never-worked","Not-Working",data$type_employer)
table(data$type_employer)
table(data$occupation)
data$occupation = gsub("^Adm-clerical","Admin",data$occupation)
data$occupation = gsub("^Armed-Forces","Military",data$occupation)
data$occupation = gsub("^Craft-repair","Blue-Collar",data$occupation)
data$occupation = gsub("^Exec-managerial","White-Collar",data$occupation)
data$occupation = gsub("^Farming-fishing","Blue-Collar",data$occupation)
data$occupation = gsub("^Handlers-cleaners","Blue-Collar",data$occupation)
data$occupation = gsub("^Machine-op-inspct","Blue-Collar",data$occupation)
data$occupation = gsub("^Other-service","Service",data$occupation)
data$occupation = gsub("^Priv-house-serv","Service",data$occupation)
data$occupation = gsub("^Prof-specialty","Professional",data$occupation)
data$occupation = gsub("^Protective-serv","Other-Occupations",data$occupation)
data$occupation = gsub("^Sales","Sales",data$occupation)
data$occupation = gsub("^Tech-support","Other-Occupations",data$occupation)
data$occupation = gsub("^Transport-moving","Blue-Collar",data$occupation)
table(data$country)
data$country[data$country=="Cambodia"] = "SE-Asia"
data$country[data$country=="Canada"] = "British-Commonwealth"
data$country[data$country=="China"] = "China"
data$country[data$country=="Columbia"] = "South-America"
data$country[data$country=="Cuba"] = "Other"
data$country[data$country=="Dominican-Republic"] = "Latin-America"
data$country[data$country=="Ecuador"] = "South-America"
data$country[data$country=="El-Salvador"] = "South-America"
data$country[data$country=="England"] = "British-Commonwealth"
data$country[data$country=="France"] = "Euro_1"
data$country[data$country=="Germany"] = "Euro_1"
data$country[data$country=="Greece"] = "Euro_2"
data$country[data$country=="Guatemala"] = "Latin-America"
data$country[data$country=="Haiti"] = "Latin-America"
data$country[data$country=="Holand-Netherlands"] = "Euro_1"
data$country[data$country=="Honduras"] = "Latin-America"
data$country[data$country=="Hong"] = "China"
data$country[data$country=="Hungary"] = "Euro_2"
data$country[data$country=="India"] = "British-Commonwealth"
data$country[data$country=="Iran"] = "Other"
data$country[data$country=="Ireland"] = "British-Commonwealth"
data$country[data$country=="Italy"] = "Euro_1"
data$country[data$country=="Jamaica"] = "Latin-America"
data$country[data$country=="Japan"] = "Other"
data$country[data$country=="Laos"] = "SE-Asia"
data$country[data$country=="Mexico"] = "Latin-America"
data$country[data$country=="Nicaragua"] = "Latin-America"
data$country[data$country=="Outlying-US(Guam-USVI-etc)"] = "Latin-America"
data$country[data$country=="Peru"] = "South-America"
data$country[data$country=="Philippines"] = "SE-Asia"
data$country[data$country=="Poland"] = "Euro_2"
data$country[data$country=="Portugal"] = "Euro_2"
data$country[data$country=="Puerto-Rico"] = "Latin-America"
data$country[data$country=="Scotland"] = "British-Commonwealth"
data$country[data$country=="South"] = "Euro_2"
data$country[data$country=="Taiwan"] = "China"
data$country[data$country=="Thailand"] = "SE-Asia"
data$country[data$country=="Trinadad&Tobago"] = "Latin-America"
data$country[data$country=="United-States"] = "United-States"
data$country[data$country=="Vietnam"] = "SE-Asia"
data$country[data$country=="Yugoslavia"] = "Euro_2"
data$education = gsub("^10th","Dropout",data$education)
data$education = gsub("^11th","Dropout",data$education)
data$education = gsub("^12th","Dropout",data$education)
data$education = gsub("^1st-4th","Dropout",data$education)
data$education = gsub("^5th-6th","Dropout",data$education)
data$education = gsub("^7th-8th","Dropout",data$education)
data$education = gsub("^9th","Dropout",data$education)
data$education = gsub("^Assoc-acdm","Associates",data$education)
data$education = gsub("^Assoc-voc","Associates",data$education)
data$education = gsub("^Bachelors","Bachelors",data$education)
data$education = gsub("^Doctorate","Doctorate",data$education)
data$education = gsub("^HS-Grad","HS-Graduate",data$education)
data$education = gsub("^Masters","Masters",data$education)
data$education = gsub("^Preschool","Dropout",data$education)
data$education = gsub("^Prof-school","Prof-School",data$education)
data$education = gsub("^Some-college","HS-Graduate",data$education)
data$marital[data$marital=="Never-married"] = "Never-Married"
data$marital[data$marital=="Married-AF-spouse"] = "Married"
data$marital[data$marital=="Married-civ-spouse"] = "Married"
data$marital[data$marital=="Married-spouse-absent"] = "Not-Married"
data$marital[data$marital=="Separated"] = "Not-Married"
data$marital[data$marital=="Divorced"] = "Not-Married"
data$marital[data$marital=="Widowed"] = "Widowed"
data$race[data$race=="White"] = "White"
data$race[data$race=="Black"] = "Black"
data$race[data$race=="Amer-Indian-Eskimo"] = "Amer-Indian"
data$race[data$race=="Asian-Pac-Islander"] = "Asian"
data$race[data$race=="Other"] = "Other"
head(data,10)
cut
cut(c(1,2))
cut((1:100),c(20,40))
cut((rep(c(1,50,100),2),c(20,40))
cut((rep(c(1,50,100),2)),c(20,40))
rep(c(1,50,100),2)
ordered(cut(data$capital_gain,c(-Inf, 0,
median(data[["capital_gain"]][data[["capital_gain"]] >0]),
var<-1:100
cut(var,c(-Inf,0,median(var),Inf))
var<-c(rep(0,50),var)
var
cut(var,c(-Inf,0,median(var),Inf))
ordered(cut(var,c(-Inf,0,median(var),Inf))),labels=c("None","Low","High")
ordered(cut(var,c(-Inf,0,median(var),Inf))),labels=c("None","Low","High"))
ordered(cut(var,c(-Inf,0,median(var),Inf)),labels = c("None", "Low", "High"))
var
data[["capital_gain"]] <- ordered(cut(data$capital_gain,c(-Inf, 0,
median(data[["capital_gain"]][data[["capital_gain"]] >0]),
Inf)),labels = c("None", "Low", "High"))
data[["capital_loss"]] <- ordered(cut(data$capital_loss,c(-Inf, 0,
median(data[["capital_loss"]][data[["capital_loss"]] >0]),
Inf)), labels = c("None", "Low", "High"))
is.na(data) = data=='?'
is.na(data) = data==' ?'
head(data,10)
head(data,50)
data[is.na(data)]
head(data,10)
length(data[is.na(data)])
data$marital = factor(data$marital)
data$education = factor(data$education)
data$country = factor(data$country)
data$type_employer = factor(data$type_employer)
data$occupation = factor(data$occupation)
data$race = factor(data$race)
data$sex = factor(data$sex)
data$relationship = factor(data$relationship)
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
data$age = scale(data$age)
data$hr_per_week = scale(data$hr_per_week)
sample = rbinom(dim(data)[1],1,.3)
trainset = data[sample==0,]
valset = data[sample==1,]
length(trainset)
length(valset)
size(trainset)
trainset
trainset = data[sample==0,]
valset = data[sample==1,]bestmtry <- tuneRF(trainset[-13],trainset$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(trainset[-13],trainset$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
library(randomForest)
library(ROCR)
install.packages('ROCR')
library(ROCR)
bestmtry <- tuneRF(trainset[-13],trainset$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
data = na.omit(data)
bestmtry <- tuneRF(trainset[-13],trainset$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
data[is.na(data)]
sample = rbinom(dim(data)[1],1,.3)
trainset = data[sample==0,]
valset = data[sample==1,]
bestmtry <- tuneRF(trainset[-13],trainset$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
adult.rf <-randomForest(income~.,data=data$train, mtry=2, ntree=1000,
keep.forest=TRUE, importance=TRUE,test=data$val)
adult.rf <-randomForest(income~.,data=trainset, mtry=2, ntree=1000,
keep.forest=TRUE, importance=TRUE,test=data$val)
adult.rf.pr = predict(adult.rf,type="prob",newdata=data$val)[,2]
adult.rf.pr = predict(adult.rf,type="prob",newdata=valset)[,2]
adult.rf.pr
hist(adult.rf.pr)
adult.rf.pred = prediction(adult.rf.pr, valset$income)
# HELLO
library(xtable)
foo <- head(iris)
foo <- xtable(foo)
print(foo, type = "html", include.rownames = TRUE)
head(iris)
head<-function(x){
head(x,2)
}
head(iris)
rm(head)
head(iris)
head(iris,2)
head<-function(x){
head(x,2)
}
head(iris)
rm(head)
head(iris)
install.packages("R2HTML")
library(R2HTML)
mydata
library(R2HTML)
HTMLStart(outdir="c:/mydir", file="myreport",
extension="html", echo=FALSE, HTMLframe=TRUE)
HTMLStart(outdir="~/R", file="myreport",
extension="html", echo=FALSE, HTMLframe=TRUE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(iris)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(mydata$y~mydata$x)
HTMLplot()
head(iris)
HTML.title("X Y Scatter Plot", HR=2)
plot(iris$Sepal.Length~mydata$Sepal.Width)
HTMLplot()
HTMLStop()
HTMLStop()
library(R2HTML)
HTMLStart(outdir="~/R", file="myreport",
extension="html", echo=FALSE, HTMLframe=FALSE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(iris)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(iris$Sepal.Length~mydata$Sepal.Width)
HTMLplot()
library(R2HTML)
HTMLStart(outdir="~/R", file="myreport",
extension="html", echo=FALSE, HTMLframe=FALSE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(iris)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(iris$Sepal.Length~iris$Sepal.Width)
HTMLplot()
HTMLStop()
library(R2HTML)
x<-HTMLStart(outdir="~/R", file="myreport",
extension="html", echo=FALSE, HTMLframe=FALSE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(iris)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(iris$Sepal.Length~iris$Sepal.Width)
HTMLplot()
HTMLStop()
library(R2HTML)
x<-HTMLStart(outdir="~/R", file="myreport",
extension="html", echo=FALSE, HTMLframe=FALSE)
HTML.title("My Report", HR=1)
x<-HTML.title("Description of my data", HR=3)
summary(iris)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(iris$Sepal.Length~iris$Sepal.Width)
HTMLplot()
HTMLStop()
install.packages('stargazer')
setwd("C:/Users/c.entwistle/Documents/BP")
list.files()
#determine what initial data types should be
trainsamp<-read.table("insurance_fraud_data.txt", sep = ",", header = TRUE, nrows = 10, stringsAsFactors = FALSE)
colclasses<-sapply(trainsamp, class)
idstrings<-grep("ID|id$", names(trainsamp))
colclasses[idstrings]<-"character"
train<-read.table("insurance_fraud_data.txt", sep = ",", header = TRUE,
colClasses = colclasses)
#reevaluate whether some data types should be changed
typing<-function(vect){
numdistinct<-length(unique(vect))
percdistinct<-numdistinct/nrow(train)
attributes<-c(class(vect), numdistinct, percdistinct)
return(attributes)
}
attributematrix<-sapply(train, typing)
#if its a character and distinct percent is below .8, then change to factor variable
#if its a numeric or integer and distinct percent is below .01, create factor variable
for (i in 1:ncol(train)){
if (attributematrix[1,i] == "character" && attributematrix[3,i] < .8){
train[,i]<- as.factor(train[,i])
}
}
for (i in 1:ncol(train)){
j<-0
if (attributematrix[1,i] %in% c("numeric", "integer", "complex") && attributematrix[3,i]<.05){
column<-ncol(train)+1+j
train[,column]<-as.factor(train[,i])
names(train)[column] <- paste0(names(train)[i], "_fact")
j<-j+1
}
}
#maybe do some manual editing here...
finalcolclasses<-sapply(train, class)
dim(train) #1100 by 13
summary(train)
table(train$gender)
?tableprop
prop.table(train$gender)
prop.table(train$gender)
prop.table(table(train$gender))
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-prop.table(counts)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-round(table(vector),0)
props<-round(prop.table(counts),2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-round(table(vector),-2)
props<-round(prop.table(counts),2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-format(table(vector), digits =0)
props<-format(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
format(table(train$gender)), digits =2)
format(table(train$gender), digits =2
)
format(prop.table(table(train$gender)), digits =2
)
oneWayFrequencyTable<- function(vector){
format(table(vector), digits =0)
#props<-format(prop.table(counts), digits =2)
#rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
install.packages(formattable)
install.packages("formattable")
library(formattable)
oneWayFrequencyTable<- function(vector){
counts<-round(table(vector), digits =2)
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-as.integer(table(vector))
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-round(prop.table(counts), digits =2)
xtable(rbind(counts, props))
}
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
oneWayFrequencyTable(train$gender)
oneWayFrequencyTable<- function(vector){
counts<-table(vector)
props<-round(prop.table(counts), digits =2)
rbind(counts, props)
}
